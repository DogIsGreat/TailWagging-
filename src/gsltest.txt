#include <stdio.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_matrix.h>
#include <gsl/gsl_odeiv2.h>

struct params{
    double K;
    double M;
};

int func (double t, const double y[], double f[], void *params){
    struct params *p = (struct params *)params;
    //int y[4] = {0,1,2,3};
    //int v[4] = {3,4,5,6}; 
    f[0] = (2*y[0]-y[1])*-p->K/p->M;
    f[1] = (-y[0]+2*y[1]-y[2])*-p->K/p->M;
    f[2] = (-y[1]+2*y[2])*-p->K/p->M;
    return GSL_SUCCESS;
}



int
main (void)
{

    struct params p = {1,1};

    gsl_odeiv2_system odesys = {func, NULL, 3, &p};
    gsl_odeiv2_driver *odedrive = gsl_odeiv2_driver_alloc_y_new(&odesys, gsl_odeiv2_step_rkf45, 1e-6,1e-6,0.0);
   
  int i;
  double t = 0.0, t1 = 100.0;
  double y[2] = { 1.0, 0.3 };

  for (i = 1; i <= 100; i++)
    {
        double ti = i * t1 / 100.0;
        int status = gsl_odeiv2_driver_apply_fixed_step(odedrive, &t, ti,1, y);

      if (status != GSL_SUCCESS)
        {
          printf ("error, return value=%d\n", status);
          break;
        }

      printf ("%.5e %.5e %.5e\n", t, y[0]*100, y[1]*200);
    }// The problem with this architecture is that these results must be statically drawn...

  gsl_odeiv2_driver_free (odedrive);
  return 0;
}