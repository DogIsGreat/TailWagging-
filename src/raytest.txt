#include <stdio.h>
#include <gsl/gsl_odeiv2.h>
#include <gsl/gsl_errno.h>
#include <raylib.h>

// Parameters structure
struct params {
    double omega_squared;
};

// System of equations
int func(double t, const double y[], double f[], void *params) {
    (void)(t); // Avoid unused variable warning.
    struct params *p = (struct params *)params;
    f[0] = y[1]; // dy[0]/dt = y[1]
    f[1] = -p->omega_squared * y[0]; // dy[1]/dt = -omega^2 * y[0]
    return GSL_SUCCESS;
}

int main() {
    const int SCREEN_WIDTH = 800;
    const int SCREEN_HEIGHT = 450;

    double omega = 1.0; // Angular frequency
    struct params p = {omega * omega};

    double t = 0.0, t1 = 20.0, dt = t1 / 100; // Time variables
    double y[2] = {1.0, 0.0}; // Initial conditions: y[0] = x, y[1] = dx/dt

    gsl_odeiv2_system sys = {func, NULL, 2, &p};
    gsl_odeiv2_driver *d = gsl_odeiv2_driver_alloc_y_new(&sys, gsl_odeiv2_step_rkf45, 1e-6, 1e-6, 0);

    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Harmonic Oscillator");
    SetTargetFPS(60);

    while (!WindowShouldClose()) {
        BeginDrawing();
        ClearBackground(RAYWHITE);

        for (int i = 0; i < 100; i++) {
            double ti = i * dt;
            int status = gsl_odeiv2_driver_apply(d, &t, ti, y);
            if (status != GSL_SUCCESS) {
                printf("Error, return value=%d\n", status);
                break;
            }

            // Convert simulation coordinates to screen coordinates
            int screenX = (int)(ti / t1 * SCREEN_WIDTH);
            int screenY = SCREEN_HEIGHT / 2 - (int)(y[0] * 50); // Scale position for visibility

            DrawPixel(screenX, screenY, BLACK);
            
        }


        EndDrawing();
         // Exit after one complete drawing for this static example
    }

    gsl_odeiv2_driver_free(d);
    CloseWindow();

    return 0;
}
